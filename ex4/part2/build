#!/bin/bash -e

COMPILER=0
LINKER=0
STRIP=0
DEPS=0
compilerOptions=""
linkerOptions=""

function synopsis {
	echo "Compiles a NASM program into an executable.
	
		
	Switches

-h 	--help				Shows Synopsis
	--clean				Cleans build
-d 	--deps				Shows files dependencies
	--compiler	[OPTION]	Insert compiler options ("" for none)
-l 	--linker	[OPTION]	Insert linker options ("" for none)
-s 	--strip			Strip the executable of debugging information

	Usage Examples:

	build [-h|--help]
		Show this synopsis.
		
	build [-c|--clean]
		Cleans the build deleting all generated files
	build [-d|--deps]
		Shows files dependencies
	"
	exit
}

function compile {

	
	if [ ! -e "obj/delta.o" ] || [ "src/delta.asm" -nt "obj/delta.o" ] || [ "src/delta.h" -nt "obj/delta.o" ]; then

		echo "delta.o not found \ outdated, compiling it from source"
		nasm -felf64 -o "obj/delta.o" "src/delta.asm"
	fi
	
	if [ ! -e "obj/helper.o" ] || [ "obj/delta.o" -nt "obj/helper.o" ] || [ "src/helper.c" -nt "obj/helper.o" ] || [ "src/helper.h" -nt "obj/helper.o" ];then
		echo "helper.o not found \ outdated, compiling it from source"
		gcc -c -shared -fpic -o "obj/helper.o" "src/helper.c" $compilerOptions
	fi

	if [ ! -e "lib/libhelper.so" ] || [ "obj/helper.o" -nt "lib/libhelper.so" ] ;then 

		echo "libhelper.so not found \ outdated, creating shared library"
		gcc -shared -fpic -o "lib/libhelper.so" "obj/helper.o" "obj/delta.o" $compilerOptions
	fi

	if [ ! -e "obj/main.o" ] || [ "src/main.c" -nt "obj/main.o" ]; then
		echo "main.o not found \ outdated, compiling main.c"
		gcc -shared -fpic -c -o "obj/main.o" "src/main.c"   $compilerOptions
	fi
}

function link {
	#Converting linking options to proper form for passing to linker:

	linkerOptions=$(echo "$linkerOptions" | tr ' ' ',')
	
	if [ ! -e "obj/main.o" ] || [ ! -e "lib/libhelper.so" ];then
		echo "Cannot link build, please compile first (--compile [OPTION])"
		exit 1
	fi

	if [ ! -e "bin/main" ] || [ "obj/main.o" -nt "bin/main" ] || [ "lib/libhelper.so" -nt "bin/main" ];then

		echo "Linking Objects and Building Executable"
		gcc -Wl,-rpath="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )/lib" $linkerOptions -L"${0%/*}/lib"   -o "bin/main" "obj/main.o" -lhelper -lm
		echo "Executable created  @bin/main"


	else
	
		echo "Executable is already up to date"
	
	fi
}

function deps {
	echo "Printing dependencies"
	gcc -MM "src/main.c"
	gcc -MM "src/helper.c"
	gcc -MM "src/delta.h"
}

function clean {
	echo "Cleaning generated files"
	rm -f obj/* lib/* bin/*
	
}


function strip {
	if [ ! -e src/main ]; then
		echo "Executable does not exist, Please Compile/Link" 
		exit 1
	fi

	echo "Stripping Executable"
		strip "bin/main"
}

OPT=$(getopt -n "builder" -o "h,d,l,s" -l "clean,help,deps,compiler:,linker:,strip" -- "$@")


eval set -- "$OPT"


while [ "$1" != "--" ]; do
	case "$1" in
	-d|--deps)
		DEPS=1
		;;
	-h|--help)
		synopsis
		;;
	--clean)
		clean
		;;
	--compiler)
		COMPILER=1
		compilerOptions="$2"
		shift
		;;
	-l|--linker)
		LINKER=1
		linkerOptions="$2"
		shift
		;;
	-s|--strip)
		STRIP=1
		;;
	*)
		echo "Invalid Arguments"
		exit 1
		;;
	esac

	shift
done

if [ $COMPILER -eq 1 ] ;then
	compile
fi

if [ $LINKER -eq 1 ] ; then
	link
fi


if [ $DEPS -eq 1 ] ; then
	deps
fi

if [ $STRIP -eq 1 ] ;then
	stripExec
fi
